// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// TODO:
// 1. how to connect price, attractiveness, field and mission
// 2. remove irrelvant fields

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum FieldStatus {
  IN_PROGRESS
  NOT_KNOWN
}

enum Familiarity {
  KNOWN
  NOT_KNOWN
}

enum Region {
  SOUTH
  NORTH
  CENTER
  JERUSALEM
}

model Field {
  id          Int         @id @default(autoincrement())
  name        String
  product     Product     @relation(fields: [product_id], references: [id])
  product_id  Int     @unique
  framer      Farmer      @relation(fields: [farmer_id], references: [id])
  farmer_id   String
  region      Region
  familiarity Familiarity
  latitude    Float
  longitude   Float
  polygon     Json
  status      FieldStatus
  status_date DateTime
  delay_date  DateTime // what does it mean delay? maybe regarding to mission?
  Satelites   Satelite[]
  Missions    Mission[]
  Histories   History[]
}

model Product {
  id       Int       @id @default(autoincrement())
  name     String
  Field   Field?
  Missions Mission?
  History History?
  Attractiveness Attractiveness?
}

model Satelite {
  id         Int      @id @default(autoincrement())
  field      Field    @relation(fields: [field_id], references: [id])
  field_id   Int      @unique
  date       DateTime
  statistics Json
  like       Boolean
}

model Attractiveness {
  id            Int      @id
  Product       Product @relation(fields: [product_id], references: [id])
  product_id  Int @unique
  date          DateTime
  leket_score   Float
  market_score  Float
  average_score Float
  like          Boolean
}

model Farmer {
  id     String  @id
  name   String
  fields Field[] // farmer can have many fields?
}

model Market {
  id         Int      @id @default(autoincrement())
  date       DateTime
  Product    Product  @relation(fields: [product_id], references: [id])
  product_id Int
  price      Float
}

model Mission {
  id              Int      @id @default(autoincrement())
  date            DateTime
  field           Field    @relation(fields: [field_id], references: [id])
  field_id        Int
  product         Product  @relation(fields: [product_id], references: [id])
  product_id      Int
  amount_kg       Float
  was_ripe        String
  was_picked      Boolean
  not_picked_desc String
}

model History {
  id Int  @id @default(autoincrement())
  field Field @relation(fields: [field_id], references: [id])
  field_id  Int
  date  DateTime
  Product Product @relation(fields: [product_id], references: [id])
  product_id  Int
  Farmer  Farmer @relation(fields: [farmer_id], references: [id])
  farmer_id Int
}
